/*
 * Copyright 2017-2023 Cyface GmbH
 *
 * This file is part of the Cyface SDK for Android.
 *
 * The Cyface SDK for Android is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Cyface SDK for Android is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Cyface SDK for Android. If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * Gradle's build file for the module which captures the sensor data.
 *
 * @author Armin Schnabel
 * @author Klemens Muthmann
 * @version 3.3.0
 * @since 1.0.0
 */

plugins {
    id 'de.cyface.android-publish' version '1.0.1' // Keep version in sync with other modules!
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName rootProject.ext.cyfaceAndroidBackendVersion
        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    }

    // Specifies the flavor dimensions you want to use. The order in which you
    // list each dimension determines its priority, from highest to lowest,
    // when Gradle merges variant sources and configurations. You must assign
    // each product flavor you configure to one of the flavor dimensions.
    flavorDimensions "project", "mode"

    productFlavors {
        // Configurations in the "project" product flavors override those in "mode"
        // flavors and the defaultConfig block. Gradle determines the priority
        // between flavor dimensions based on the order in which they appear next
        // to the flavorDimensions property above--the first dimension has a higher
        // priority than the second, and so on.
        movebis {
            dimension "project"
        }
        cyface {
            dimension "project"
        }
        mock {
            dimension "mode"
        }
        full {
            dimension "mode"
        }
    }

    buildTypes {
        release {
            // Enable in app module to generate a single mapping.xml which can be uploaded to PlayStore
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Required by Roboletric
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    // Enabling desugaring to support Java 8 and Java 11 features
    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.kotlinTargetJavaVersion
    }
}

dependencies {
    // Android dependencies
    implementation "androidx.annotation:annotation:$rootProject.ext.androidxAnnotationVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.ext.androidxAppCompatVersion"
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:$rootProject.ext.localbroadcastmanagerVersion"

    // `Room` API used to access database
    // Further room libraries and Kotlin support see Room guide.
    implementation "androidx.room:room-runtime:$rootProject.ext.roomVersion"
    annotationProcessor "androidx.room:room-compiler:$rootProject.ext.roomVersion"
    // To use Room with Kotlin
    //kapt "androidx.room:room-compiler:$rootProject.ext.roomVersion"

    // Kotlin components
    //implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.ext.coroutinesVersion"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.ext.coroutinesVersion"

    // Cyface dependencies
    implementation "de.cyface:android-utils:$rootProject.ext.cyfaceUtilsVersion"
    implementation project(":persistence")
    implementation project(":synchronization")

    // Dependencies for instrumentation tests
    androidTestImplementation project(":testutils")
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.junitVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.ext.rulesVersion"

    // Dependencies for local unit tests
    testImplementation project(":testutils")
    // If Junit symbols are unresolvable make sure Build Variant is set to debug
    testImplementation "androidx.test.ext:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    // Optional - For better debuggable asserts
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testImplementation "org.robolectric:robolectric:$rootProject.ext.robolectricVersion"
}
