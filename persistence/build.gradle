/*
 * Copyright 2017-2021 Cyface GmbH
 *
 * This file is part of the Cyface SDK for Android.
 *
 * The Cyface SDK for Android is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Cyface SDK for Android is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Cyface SDK for Android. If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * Gradle's build file for the module which persists the sensor data.
 *
 * @author Armin Schnabel
 * @author Klemens Muthmann
 * @version 3.1.0
 * @since 1.0.0
 */

plugins {
    id 'de.cyface.android-publish' version '1.0.0'
    id 'com.google.protobuf' version '0.8.16'
    // To download the `measurement.proto` file and to generate `java-lite` files required here
    //noinspection SpellCheckingInspection
    id 'de.undercouch.download'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName rootProject.ext.cyfaceBackendVersion
        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    }

    buildTypes {
        release {
            // Enable in app module to generate a single mapping.xml which can be uploaded to PlayStore
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Enabling desugaring to support Java 8 and Java 11 features
    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }

    // To avoid having to upgrade to `androidX.appCompat:1.3.0-beta1` [CY-5525]
    lintOptions {
        disable 'ObsoleteLintCustomCheck'
    }

    // Uncomment to show more lint warnings
    /*tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true
    }*/

    // To add the `measurement.proto` file (downloadAndUnzipProto task) to the sourceSet
    sourceSets {
        main {
            proto {
                // In addition to the default 'src/main/proto'
                srcDir "build/protos-${rootProject.ext.cyfaceProtosVersion}/src/main/proto"
            }
        }
        test {
            proto {
                srcDir "build/protos-${rootProject.ext.cyfaceProtosVersion}/src/main/proto"
            }
        }
    }
}

dependencies {
    // Protocol Buffer: generate java files
    implementation "com.google.protobuf:protobuf-javalite:$rootProject.ext.protobufVersion"

    // Android dependencies
    implementation "androidx.annotation:annotation:$rootProject.ext.androidxAnnotationVersion"

    // Upload
    implementation ("com.google.api-client:google-api-client:$rootProject.ext.googleApiClientVersion",{
        exclude group:'org.apache.httpcomponents', module:'httpclient'
    })

    // Cyface dependencies
    implementation "de.cyface:android-utils:$rootProject.ext.cyfaceUtilsVersion"

    // Dependencies for local unit tests
    testImplementation project(":testutils")
    // If Junit symbols are unresolvable make sure Build Variant is set to debug
    testImplementation "androidx.test.ext:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    // Optional - For better debuggable asserts
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testImplementation "org.robolectric:robolectric:$rootProject.ext.robolectricVersion"
    testImplementation "androidx.test:core:$rootProject.ext.androidxTestCoreVersion"

    // Dependencies for instrumentation tests
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.junitVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.ext.rulesVersion"
}

// Gradle Protocol Buffer Plugin: https://github.com/google/protobuf-gradle-plugin
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobufVersion"
    }
    generateProtoTasks {
        //noinspection GroovyAssignabilityCheck
        all().each { task ->
            // Explicit dependency or else Gradle 7 shows a warning (implicit dependency)
            task.dependsOn downloadAndUnzipProto
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

// Download the `measurement.proto` file to compile the `java-lite` proto classes
// Instead of dependency: `protobuf "de.cyface:protos:$rootProject.ext.cyfaceProtosVersion"`
// - `protobuf` loads our proto *and* the google proto -> collision w/dependency of java-lite
// - `implementation` also loads the java classes, which we don't want
// - `protobuf` instead of `implementation` as we want to re-compile the proto files
// - issue: https://github.com/google/protobuf-gradle-plugin/issues/503
// - Thus, we download the zip, extract the proto file of ours and include the sourceSets for now
tasks.register("downloadProto", Download) {
    src "https://github.com/cyface-de/protos/archive/refs/tags/${cyfaceProtosVersion}.zip"
    dest "$buildDir/protos-${cyfaceProtosVersion}.zip"
    overwrite false // only download if not existent
}
tasks.register("downloadAndUnzipProto", Copy) {
    dependsOn "downloadProto"
    from zipTree(downloadProto.dest)
    into buildDir
}
preBuild.dependsOn downloadAndUnzipProto
