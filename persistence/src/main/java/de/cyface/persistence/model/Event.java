/*
 * Copyright 2019 Cyface GmbH
 *
 * This file is part of the Cyface SDK for Android.
 *
 * The Cyface SDK for Android is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Cyface SDK for Android is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Cyface SDK for Android. If not, see <http://www.gnu.org/licenses/>.
 */
package de.cyface.persistence.model;

import java.util.Arrays;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

/**
 * {@code Event}s are things that happen on the user device which may be important and are, thus, logged.
 * For examples see the {@link EventType}s.
 *
 * @author Armin Schnabel
 * @version 2.0.2
 * @since 4.0.0
 */
public class Event {

    /**
     * The system wide unique identifier of this {@link Event}. Usually this value is generated by a data store
     * (i.e. database).
     */
    private Long id;
    /**
     * The {@code EventType} collected by this {@link Event}.
     */
    private EventType type;
    /**
     * The timestamp at which this {@code Event} was captured in milliseconds since 1.1.1970.
     */
    private long timestamp;
    /**
     * A String which provides information about the {@link Event} which is not already clarified by
     * {@link #getType()}, e.g.: Even type {@link EventType#MODALITY_TYPE_CHANGE} requires a {@code #value}, e.g.
     * {@link Modality#CAR} which defines the new {@link Modality}. Or {@code Null} if the {@code EventType} does not
     * required this attribute.
     */
    private final String value;

    /**
     * @param id The system wide unique identifier of this {@link Event}. Usually this value is generated by a data
     *            store (i.e. database).
     * @param type The {@link EventType} collected by this {@link Event}.
     * @param timestamp The timestamp at which this {@code Event} was captured in milliseconds since 1.1.1970.
     * @param value A String which provides information about the {@link Event} which is not already clarified by
     *            {@link #getType()}, e.g.: Even type {@link EventType#MODALITY_TYPE_CHANGE} requires a {@code #value},
     *            e.g. {@link Modality#CAR} which defines the new {@link Modality}. If no such information is required
     *            use
     */
    public Event(final long id, @NonNull final EventType type, final long timestamp, @NonNull final String value) {
        this.id = id;
        this.type = type;
        this.timestamp = timestamp;
        this.value = value;
    }

    @NonNull
    public EventType getType() {
        return type;
    }

    public long getTimestamp() {
        return timestamp;
    }

    @Nullable
    public String getValue() {
        return value;
    }

    public long getIdentifier() {
        return id;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        Event event = (Event)o;

        // (1) not available in this minSDK version (2) value is null when a LIFECYCLE event is stored
        // noinspection EqualsReplaceableByObjectsCall, ConstantConditions
        return id.equals(event.id) && timestamp == event.timestamp &&
                (value == null ? event.value == null : value.equals(event.value)) &&
                type == event.type;
    }

    @Override
    public int hashCode() {
        return Arrays.hashCode(new Object[] {type, timestamp, value});
    }

    @NonNull
    @Override
    public String toString() {
        return "Event{" +
                "id=" + id +
                ", type=" + type +
                ", timestamp=" + timestamp +
                ", value='" + value + '\'' +
                '}';
    }

    /**
     * Defines the {@code EventType}s which may be collected.
     * <p>
     * An example are the use of the life-cycle methods such as start, pause, resume, etc. which are required to
     * slice {@link Measurement}s into {@link Track}s before they are resumed.
     *
     * @author Armin Schnabel
     * @version 1.0.0
     * @since 4.0.0
     */
    public enum EventType {
        LIFECYCLE_START("LIFECYCLE_START"), LIFECYCLE_PAUSE("LIFECYCLE_PAUSE"), LIFECYCLE_RESUME(
                "LIFECYCLE_RESUME"), LIFECYCLE_STOP("LIFECYCLE_STOP"), MODALITY_TYPE_CHANGE("MODALITY_TYPE_CHANGE");

        private String databaseIdentifier;

        EventType(final String databaseIdentifier) {
            this.databaseIdentifier = databaseIdentifier;
        }

        public String getDatabaseIdentifier() {
            return databaseIdentifier;
        }
    }
}
