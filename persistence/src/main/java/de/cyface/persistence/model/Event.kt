/*
 * Copyright 2023 Cyface GmbH
 *
 * This file is part of the Cyface SDK for Android.
 *
 * The Cyface SDK for Android is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Cyface SDK for Android is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Cyface SDK for Android. If not, see <http://www.gnu.org/licenses/>.
 */
package de.cyface.persistence.model

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.ForeignKey
import androidx.room.ForeignKey.CASCADE
import androidx.room.PrimaryKey
import java.util.Objects

/**
 * An `@Entity` which represents a persisted [Event] captured by the `DataCapturingService`.
 *
 * An instance of this class represents one row in a database table containing the event data.
 *
 * @author Armin Schnabel
 * @version 3.0.0
 * @since 4.0.0
 * @property id The system-wide unique identifier of this entity, generated by the data store.
 * It's `0`, which equals `null` in the non-nullable column `Long` when the entry is not yet persisted.
 * @property timestamp The timestamp at which this [Event] was captured in milliseconds since 1.1.1970.
 * @property type The type of this [Event].
 * @property value A [String] which provides information about this [Event] which is not already clarified by
 * the [type], e.g.: [EventType.MODALITY_TYPE_CHANGE] requires a [value], e.g. [Modality.CAR] which
 * defines the new [Modality]. Or `Null` if the [type] does not require this a [value].
 * @property measurementId The device-unique id of the measurement this [Event] belongs to.
 * This foreign key points to [Measurement.id] and is indexed to avoid full table scan on parent update.
 */
@Entity(
    foreignKeys = [ForeignKey(
        entity = Measurement::class,
        parentColumns = arrayOf("id"),
        childColumns = arrayOf("measurementId"),
        onDelete = CASCADE
    )]
)
data class Event(
    @PrimaryKey(autoGenerate = true) var id: Long = 0,
    val timestamp: Long,
    val type: EventType,
    val value: String?,
    @ColumnInfo(index = true) val measurementId: Long
) {

    /**
     * Creates a new instance of this class which was not yet persisted and has [id] set to `0`.
     *
     * @param timestamp The timestamp at which this [Event] was captured in milliseconds since 1.1.1970.
     * @param type The type of this [Event].
     * @param value A [String] which provides information about this [Event] which is not already clarified by
     * the [type], e.g.: [EventType.MODALITY_TYPE_CHANGE] requires a [value], e.g. [Modality.CAR] which
     * defines the new [Modality]. Or `Null` if the [type] does not require this a [value].
     * @param measurementId The device-unique id of the measurement this [Event] belongs to.
     */
    constructor(
        timestamp: Long, type: EventType, value: String?, measurementId: Long
    ) : this(0, timestamp, type, value, measurementId)

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Event

        if (id != other.id) return false
        if (timestamp != other.timestamp) return false
        if (type != other.type) return false
        if (value != other.value) return false
        if (measurementId != other.measurementId) return false

        return true
    }

    override fun hashCode(): Int {
        return Objects.hash(id)
    }

    /*companion object {
        /**
         * The table's URI's path for the table which contains the data represented by this class.
         *
         * FIXME: Maybe move this to the `content.MeasurementProvider` class, as only used there.
         * But on the other hand, the Table name is defined in this class.
         */
        private const val URI_PATH = "Event"

        /**
         * Returns the URI which identifies the table represented by this class.
         *
         * It's important to provide the authority string as parameter because depending on from where
         * you call this you want to access your own authorities database.
         *
         * FIXME: Maybe move this to the `content.MeasurementProvider` class, as only used there.
         * But on the other hand, the Table name is defined in this class.
         *
         * @param authority The authority to access the database
         */
        fun getUri(authority: String): Uri {
            return Uri.Builder().scheme("content").authority(authority).appendPath(URI_PATH).build()
        }
    }*/
}