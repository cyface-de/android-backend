/*
 * Copyright 2017 Cyface GmbH
 *
 * This file is part of the Cyface SDK for Android.
 *
 * The Cyface SDK for Android is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Cyface SDK for Android is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Cyface SDK for Android. If not, see <http://www.gnu.org/licenses/>.
 */
package de.cyface.persistence.model;

import androidx.annotation.NonNull;

import de.cyface.persistence.serialization.MeasurementSerializer;

/**
 * An object of this class represents a single {@link Measurement} captured by the {@code DataCapturingService}. This
 * usually happens between complementary calls to
 * {@code DataCapturingService#start(DataCapturingListener, Modality, StartUpFinishedHandler)} and
 * {@code DataCapturingService#stop(ShutDownFinishedHandler)}.
 *
 * @author Klemens Muthmann
 * @author Armin Schnabel
 * @version 5.0.0
 * @since 1.0.0
 */
public final class Measurement {

    /**
     * The system wide unique identifier of this {@link Measurement}. Usually this value is generated by a data store
     * (i.e. database).
     */
    private Long id;
    /**
     * The {@link MeasurementStatus} of the {@link Measurement}. Usually only one measurement should be in the
     * {@link MeasurementStatus#OPEN} or {@link MeasurementStatus#PAUSED} state, else there has been some error.
     */
    private MeasurementStatus status;
    /**
     * The {@link Modality} used in this {@link Measurement}.
     */
    private Modality modality;
    /**
     * The {@link MeasurementSerializer#PERSISTENCE_FILE_FORMAT_VERSION} used to serialize the data in the file
     * persistence layer of for this {@link Measurement}.
     */
    private short fileFormatVersion;
    /**
     * The distance of this {@link Measurement} based on its {@link GeoLocation}s in meters.
     */
    private double distance;
    /**
     * The Unix timestamp in milliseconds indicating the start time of the measurement.
     */
    private long timestamp;

    /**
     * Creates a new completely initialized {@link Measurement}.
     *
     * @param id The system wide unique identifier of this {@code Measurement}. Usually this value is generated by a
     *            data store (i.e. database).
     * @param status The {@link MeasurementStatus} of the {@link Measurement}. Usually only one measurement should be in
     *            the {@link MeasurementStatus#OPEN} or {@link MeasurementStatus#PAUSED} state, else there has been some
     *            error.
     * @param modality The {@link Modality} used in this {@link Measurement}.
     * @param fileFormatVersion The {@link MeasurementSerializer#PERSISTENCE_FILE_FORMAT_VERSION} used to serialize the
     *            data in the file persistence layer of for this {@link Measurement}.
     * @param distance The distance of this {@link Measurement} based on its {@link GeoLocation}s in meters.
     * @param timestamp The Unix timestamp in milliseconds indicating the start time of the measurement.
     */
    public Measurement(final long id, @NonNull final MeasurementStatus status, @NonNull final Modality modality,
            final short fileFormatVersion, final double distance, final long timestamp) {
        this.id = id;
        this.status = status;
        this.modality = modality;
        this.fileFormatVersion = fileFormatVersion;
        this.distance = distance;
        this.timestamp = timestamp;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        Measurement that = (Measurement)o;
        return fileFormatVersion == that.fileFormatVersion && Double.compare(that.distance, distance) == 0
                && timestamp == that.timestamp && id.equals(that.id) && status == that.status
                && modality == that.modality;
    }

    @Override
    public int hashCode() {
        return (int)(id ^ (id >>> 32));
    }

    public long getIdentifier() {
        return id;
    }

    public MeasurementStatus getStatus() {
        return status;
    }

    public Modality getModality() {
        return modality;
    }

    public short getFileFormatVersion() {
        return fileFormatVersion;
    }

    public double getDistance() {
        return distance;
    }

    public long getTimestamp() {
        return timestamp;
    }

    @Override
    public String toString() {
        return "Measurement{" +
                "id=" + id +
                ", status=" + status +
                ", modality=" + modality +
                ", fileFormatVersion=" + fileFormatVersion +
                ", distance=" + distance +
                ", timestamp=" + timestamp +
                '}';
    }
}
