/*
 * Copyright 2017-2021 Cyface GmbH
 *
 * This file is part of the Cyface SDK for Android.
 *
 * The Cyface SDK for Android is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Cyface SDK for Android is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Cyface SDK for Android. If not, see <http://www.gnu.org/licenses/>.
 */
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

/**
 * Gradle's build file for the module which synchronizes the sensor data.
 *
 * @author Armin Schnabel
 * @author Klemens Muthmann
 * @version 3.1.0
 * @since 1.0.0
 */

plugins {
    id 'de.cyface.android-publish' version '1.0.1' // Keep version in sync with other modules!
    id 'kotlin-android'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName rootProject.ext.cyfaceAndroidBackendVersion
        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    }

    // Specifies the flavor dimensions you want to use. The order in which you
    // list each dimension determines its priority, from highest to lowest,
    // when Gradle merges variant sources and configurations. You must assign
    // each product flavor you configure to one of the flavor dimensions.
    flavorDimensions "project", "mode"

    productFlavors {
        // Configurations in the "project" product flavors override those in "mode"
        // flavors and the defaultConfig block. Gradle determines the priority
        // between flavor dimensions based on the order in which they appear next
        // to the flavorDimensions property above--the first dimension has a higher
        // priority than the second, and so on.
        movebis {
            dimension "project"
        }
        cyface {
            dimension "project"
        }
        //noinspection SpellCheckingInspection
        mock {
            dimension "mode"
            // Excludes flaky tests that are trying to access a Cyface server.
            // [DAT-795] This annotation does not ignore tests marked with `@FlakyTest` anymore
            // ./gradlew module:cAT -Pandroid.testInstrumentationRunnerArguments.notAnnotation=androidx.test.filters.FlakyTest
            // still works when disabling this line
            testInstrumentationRunnerArgument "notAnnotation", "androidx.test.filters.FlakyTest"
        }
        full {
            dimension "mode"
        }
    }

    buildTypes {
        release {
            // Enable in app module to generate a single mapping.xml which can be uploaded to PlayStore
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Required by Roboletric
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    // Enabling desugaring to support Java 8 and Java 11 features
    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.kotlinTargetJavaVersion
    }

    packagingOptions {
        // To resolve the conflict warning after adding google-api-client dependency
        exclude 'META-INF/DEPENDENCIES'
    }
}

dependencies {
    // Upload
    implementation ("com.google.api-client:google-api-client:$rootProject.ext.googleApiClientVersion",{
        exclude group:'org.apache.httpcomponents', module:'httpclient'
    })

    // Cyface dependencies
    implementation "de.cyface:android-utils:$rootProject.ext.cyfaceUtilsVersion"
    implementation project(":persistence")

    // Android
    implementation "androidx.annotation:annotation:$rootProject.ext.androidxAnnotationVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.ext.androidxAppCompatVersion"
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:$rootProject.ext.localbroadcastmanagerVersion"

    // Dependencies for instrumentation tests
    androidTestImplementation project(":testutils")
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.junitVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.ext.rulesVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.ext.mockitoVersion"
    // For some reasons the CI does does pull the transitive dependencies of mockito-android which will fails
    // https://search.maven.org/remotecontent?filepath=org/mockito/mockito-android/2.26.0/mockito-android-2.26.0.pom
    androidTestImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"

    // Dependencies for local unit tests
    testImplementation project(":testutils")
    testImplementation "de.cyface:deserializer:$rootProject.ext.cyfaceSerializationVersion"
    // If Junit symbols are unresolvable make sure Build Variant is set to debug
    testImplementation "androidx.test.ext:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    // Optional - For better debuggable asserts
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testImplementation "org.robolectric:robolectric:$rootProject.ext.robolectricVersion"
    testImplementation "androidx.test:core:$rootProject.ext.androidxTestCoreVersion"
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
